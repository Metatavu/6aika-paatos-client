/**
 * Open Decisions API
 * API for distributing data about decisions and people behind those decisions
 *
 * OpenAPI spec version: 0.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Content', 'model/ModelCase', 'model/Organization', 'model/Post', 'model/VoteEvent'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Content'), require('./ModelCase'), require('./Organization'), require('./Post'), require('./VoteEvent'));
  } else {
    // Browser globals (root is window)
    if (!root.PaatosApiClient) {
      root.PaatosApiClient = {};
    }
    root.PaatosApiClient.Action = factory(root.PaatosApiClient.ApiClient, root.PaatosApiClient.Content, root.PaatosApiClient.ModelCase, root.PaatosApiClient.Organization, root.PaatosApiClient.Post, root.PaatosApiClient.VoteEvent);
  }
}(this, function(ApiClient, Content, ModelCase, Organization, Post, VoteEvent) {
  'use strict';




  /**
   * The Action model module.
   * @module model/Action
   * @version 0.0.3
   */

  /**
   * Constructs a new <code>Action</code>.
   * An action taken by a decision maker. Except for formalities (like quorum), these always involve a case and a decision by an organization or post, even if only postponing the decision. For decision making bodies, actions are always taken in context of a meeting. For officials, some cities also publish their decisions as being done in a meeting, although there is only one person present.
   * @alias module:model/Action
   * @class
   */
  var exports = function() {
    var _this = this;










  };

  /**
   * Constructs a <code>Action</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Action} obj Optional instance to populate.
   * @return {module:model/Action} The populated <code>Action</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('title')) {
        obj['title'] = ApiClient.convertToType(data['title'], 'String');
      }
      if (data.hasOwnProperty('case')) {
        obj['case'] = ModelCase.constructFromObject(data['case']);
      }
      if (data.hasOwnProperty('ordering')) {
        obj['ordering'] = ApiClient.convertToType(data['ordering'], 'Number');
      }
      if (data.hasOwnProperty('article_number')) {
        obj['article_number'] = ApiClient.convertToType(data['article_number'], 'String');
      }
      if (data.hasOwnProperty('responsible_party')) {
        obj['responsible_party'] = Organization.constructFromObject(data['responsible_party']);
      }
      if (data.hasOwnProperty('delegate_post')) {
        obj['delegate_post'] = Post.constructFromObject(data['delegate_post']);
      }
      if (data.hasOwnProperty('content')) {
        obj['content'] = Content.constructFromObject(data['content']);
      }
      if (data.hasOwnProperty('votes')) {
        obj['votes'] = ApiClient.convertToType(data['votes'], [VoteEvent]);
      }
    }
    return obj;
  }

  /**
   * Unique identifier for this action
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Title of the action
   * @member {String} title
   */
  exports.prototype['title'] = undefined;
  /**
   * Case this action is related to
   * @member {module:model/ModelCase} case
   */
  exports.prototype['case'] = undefined;
  /**
   * Ordering of this action within a meeting (or possibly arbitrary ordering)
   * @member {Number} ordering
   */
  exports.prototype['ordering'] = undefined;
  /**
   * The article number given to this action after decision, will be null before decision
   * @member {String} article_number
   */
  exports.prototype['article_number'] = undefined;
  /**
   * The city organization responsible for this decision. If decision is delegated, this is the organization that delegated the authority.
   * @member {module:model/Organization} responsible_party
   */
  exports.prototype['responsible_party'] = undefined;
  /**
   * If this decision was delegated, this field will be filled and refers to the post that made the decision
   * @member {module:model/Post} delegate_post
   */
  exports.prototype['delegate_post'] = undefined;
  /**
   * @member {module:model/Content} content
   */
  exports.prototype['content'] = undefined;
  /**
   * Votes taken during this action.
   * @member {Array.<module:model/VoteEvent>} votes
   */
  exports.prototype['votes'] = undefined;



  return exports;
}));


