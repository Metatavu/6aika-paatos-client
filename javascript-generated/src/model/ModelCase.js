/**
 * Open Decisions API
 * API for distributing data about decisions and people behind those decisions
 *
 * OpenAPI spec version: 0.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Attachment', 'model/Geometry'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Attachment'), require('./Geometry'));
  } else {
    // Browser globals (root is window)
    if (!root.PaatosApiClient) {
      root.PaatosApiClient = {};
    }
    root.PaatosApiClient.ModelCase = factory(root.PaatosApiClient.ApiClient, root.PaatosApiClient.Attachment, root.PaatosApiClient.Geometry);
  }
}(this, function(ApiClient, Attachment, Geometry) {
  'use strict';




  /**
   * The ModelCase model module.
   * @module model/ModelCase
   * @version 0.0.7
   */

  /**
   * Constructs a new <code>ModelCase</code>.
   * A matter being decided withing the organization. These are often considered across multiple meetings and possibly across multiple decision makers. Cases can also be related to other cases, forming more complex structures. All that said, it is not unusual for a case to involve only a single action. Previous version used *issue* as similar concept, without interlinking.
   * @alias module:model/ModelCase
   * @class
   */
  var exports = function() {
    var _this = this;













  };

  /**
   * Constructs a <code>ModelCase</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ModelCase} obj Optional instance to populate.
   * @return {module:model/ModelCase} The populated <code>ModelCase</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('url')) {
        obj['url'] = ApiClient.convertToType(data['url'], 'String');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('data_source')) {
        obj['data_source'] = ApiClient.convertToType(data['data_source'], 'String');
      }
      if (data.hasOwnProperty('actions')) {
        obj['actions'] = ApiClient.convertToType(data['actions'], ['String']);
      }
      if (data.hasOwnProperty('geometries')) {
        obj['geometries'] = ApiClient.convertToType(data['geometries'], [Geometry]);
      }
      if (data.hasOwnProperty('created_at')) {
        obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
      }
      if (data.hasOwnProperty('modified_at')) {
        obj['modified_at'] = ApiClient.convertToType(data['modified_at'], 'Date');
      }
      if (data.hasOwnProperty('origin_id')) {
        obj['origin_id'] = ApiClient.convertToType(data['origin_id'], 'String');
      }
      if (data.hasOwnProperty('title')) {
        obj['title'] = ApiClient.convertToType(data['title'], 'String');
      }
      if (data.hasOwnProperty('register_id')) {
        obj['register_id'] = ApiClient.convertToType(data['register_id'], 'String');
      }
      if (data.hasOwnProperty('function')) {
        obj['function'] = ApiClient.convertToType(data['function'], 'String');
      }
      if (data.hasOwnProperty('attachments')) {
        obj['attachments'] = ApiClient.convertToType(data['attachments'], [Attachment]);
      }
    }
    return obj;
  }

  /**
   * The case's url
   * @member {String} url
   */
  exports.prototype['url'] = undefined;
  /**
   * The case's unique identifier
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The case's data source
   * @member {String} data_source
   */
  exports.prototype['data_source'] = undefined;
  /**
   * Array of urls to actions
   * @member {Array.<String>} actions
   */
  exports.prototype['actions'] = undefined;
  /**
   * Array of geometries
   * @member {Array.<module:model/Geometry>} geometries
   */
  exports.prototype['geometries'] = undefined;
  /**
   * The time at which the resource was created
   * @member {Date} created_at
   */
  exports.prototype['created_at'] = undefined;
  /**
   * The time at which the resource was last modified
   * @member {Date} modified_at
   */
  exports.prototype['modified_at'] = undefined;
  /**
   * The event's origin id
   * @member {String} origin_id
   */
  exports.prototype['origin_id'] = undefined;
  /**
   * Title of the case
   * @member {String} title
   */
  exports.prototype['title'] = undefined;
  /**
   * Register id for this case
   * @member {String} register_id
   */
  exports.prototype['register_id'] = undefined;
  /**
   * Function url for this case
   * @member {String} function
   */
  exports.prototype['function'] = undefined;
  /**
   * Array of attachments
   * @member {Array.<module:model/Attachment>} attachments
   */
  exports.prototype['attachments'] = undefined;



  return exports;
}));


